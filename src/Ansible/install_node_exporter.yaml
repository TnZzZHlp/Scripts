- name: Install Node Exporter
  hosts: node_exporter
  vars:
    node_exporter_user: root
    node_exporter_binary_path: /usr/local/bin/node_exporter
    node_exporter_service_path: /etc/systemd/system/node_exporter.service
    temp_dir: /tmp

  tasks:
    - name: Check if Node Exporter is already installed
      stat:
        path: "{{ node_exporter_binary_path }}"
      register: node_exporter_exists

    - name: Check if Node Exporter service is already running
      systemd:
        name: node_exporter
      register: node_exporter_service
      ignore_errors: true

    - name: Display skip message if Node Exporter is already installed
      debug:
        msg: "Node Exporter 已经安装并运行，跳过安装步骤。"
      when: node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active"

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Install required packages
      apt:
        name:
          - curl
          - jq
          - tar
        state: present
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Get latest Node Exporter release information
      uri:
        url: https://api.github.com/repos/prometheus/node_exporter/releases/latest
        method: GET
        return_content: yes
      register: github_release
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Extract download URL for linux-amd64
      set_fact:
        download_url: "{{ github_release.json.assets | selectattr('name', 'search', 'linux-amd64') | map(attribute='browser_download_url') | first }}"
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Fail if download URL not found
      fail:
        msg: "无法获取 Node Exporter 下载链接，请检查网络连接或 GitHub API 状态。"
      when:
        - not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")
        - download_url is not defined or download_url == ""

    - name: Download Node Exporter
      get_url:
        url: "{{ download_url }}"
        dest: "{{ temp_dir }}/{{ download_url | basename }}"
        mode: "0644"
      register: download_result
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Extract Node Exporter archive
      unarchive:
        src: "{{ download_result.dest }}"
        dest: "{{ temp_dir }}"
        remote_src: yes
        creates: "{{ temp_dir }}/node_exporter-*/node_exporter"
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Find extracted directory
      find:
        paths: "{{ temp_dir }}"
        patterns: "node_exporter-*"
        file_type: directory
      register: extracted_dirs
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Copy Node Exporter binary to /usr/local/bin
      copy:
        src: "{{ extracted_dirs.files[0].path }}/node_exporter"
        dest: "{{ node_exporter_binary_path }}"
        mode: "0755"
        owner: root
        group: root
        remote_src: yes
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Create Node Exporter systemd service file
      copy:
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User={{ node_exporter_user }}
          ExecStart={{ node_exporter_binary_path }}

          [Install]
          WantedBy=multi-user.target
        dest: "{{ node_exporter_service_path }}"
        mode: "0644"
        owner: root
        group: root
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Start and enable Node Exporter service
      systemd:
        name: node_exporter
        state: started
        enabled: yes
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")

    - name: Clean up downloaded files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ download_result.dest }}"
        - "{{ extracted_dirs.files[0].path }}"
      when:
        - not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")
        - extracted_dirs.files is defined and extracted_dirs.files | length > 0

    - name: Display installation completion message
      debug:
        msg: "Node Exporter 安装完成！"
      when: not (node_exporter_exists.stat.exists and node_exporter_service.status.ActiveState == "active")
